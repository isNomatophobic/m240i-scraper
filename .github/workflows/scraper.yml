name: BMW 240 Scraper

# Runs every hour to check for new BMW 240 listings
on:
  schedule:
    # At minute 0 of every hour
    - cron: "0 * * * *"
  # Manual trigger
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Show schedule info
        run: |
          echo "Current time (UTC): $(date -u '+%Y-%m-%d %H:%M:%S')"
          next_hour=$(date -u -d '1 hour' '+%Y-%m-%d %H:00:00')
          echo "Next scheduled run (UTC): $next_hour"

      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Download previous database
        uses: dawidd6/action-download-artifact@v3
        continue-on-error: true
        with:
          name: listings-db
          path: .
          search_artifacts: true
          if_no_artifact_found: warn
          workflow_conclusion: success

      - name: Check download status
        run: |
          echo "Current directory contents:"
          ls -la
          if [ -f "listings.db" ]; then
            echo "Database exists with size:"
            du -h listings.db
            echo "Database contents:"
            sqlite3 listings.db "SELECT COUNT(*) FROM listings;"
          else
            echo "No database file found after download"
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > .env
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> .env

      - name: Run scraper
        run: python scraper.py

      - name: Check database after scraping
        run: |
          echo "Checking database after scraping:"
          ls -la listings.db || echo "Database file not found!"
          if [ -f listings.db ]; then
            echo "Database exists with size:"
            du -h listings.db
            echo "Database contents:"
            sqlite3 listings.db "SELECT COUNT(*) FROM listings;"
          fi

      - name: Upload database for next run
        uses: actions/upload-artifact@v4
        with:
          name: listings-db
          path: listings.db
          retention-days: 1
          overwrite: true
